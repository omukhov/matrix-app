{"version":3,"sources":["components/cell/index.js","components/cell/cell.js","components/matrix/matrix.js","components/app/index.js","components/app/App.js","index.js"],"names":["Cell","value","number","isValid","className","style","backgroundColor","Matrix","numbers","useMemo","arrayNumbers","i","push","Math","floor","random","useState","filtredName","setFiltredName","checkFilters","handleCell","e","filterName","target","Fragment","map","index","createMatrix","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"4OACeA,ECkBF,SAAC,GAAuB,IAhBnBC,EAgBHC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QACnB,OACE,mCAEEA,EAAU,qBAAMC,UAAU,iBAAiBC,MAAO,CAACC,iBApBzCL,EAoBmEC,EAnB/ED,EAAQ,GACJ,WAAN,OAAkB,GAAKA,EAAvB,aAAiC,GAAKA,EAAtC,KAEEA,EAAQ,EACJ,SAAN,OAAgB,GAAKA,EAArB,aAA+B,GAAKA,EAApC,KAGEA,GAAS,EACL,OAAN,OAAc,GAAKA,EAAnB,aAGK,oBAQS,SACV,sBAAMG,UAAU,SAAhB,SAA0BF,MAChB,qBAAME,UAAU,kBCiEnBG,G,MAtFA,WACb,IAAMC,EAAUC,mBAAQ,WAItB,IAHA,IAEIC,EAAe,GACVC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAaE,KAAKC,KAAKC,MAAM,IAAAD,KAAKE,WAJxB,KAMZ,OAAOL,IACN,IAEH,EAAsCM,mBAAS,OAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAe,SAACjB,GAEpB,MAAoB,QAAhBe,IAIgB,aAAhBA,EACEf,EAAS,EAOK,aAAhBe,EACEf,EAAS,OADf,IAoBIkB,EAAa,SAACC,GAClB,IAAIC,EAAaD,EAAEE,OAAOtB,MAEP,QAAfqB,GACFJ,EAAeI,GAGE,aAAfA,GACFJ,EAAeI,GAGE,aAAfA,GACFJ,EAAeI,IAInB,OACE,eAAC,IAAME,SAAP,WACE,qBAAKpB,UAAU,SAAf,wBACA,qBAAKA,UAAU,QAAf,SACE,qBAAKA,UAAU,SAAf,SA/Be,SAACI,GACpB,OAAOA,EAAQiB,KAAI,SAACvB,EAAQwB,GAAT,OACjB,qBACEtB,UAAS,eAAUe,EAAajB,GAAU,GAAK,cADjD,SAIE,cAAC,EAAD,CAAMC,QAASgB,EAAajB,GAASA,OAAQA,KAFxCwB,MA4BFC,CAAanB,OAGlB,sBAAKJ,UAAU,SAAf,UACE,wBAAQH,MAAM,WAAWG,UAAU,WAAWwB,QAASR,EAAvD,wBAGA,wBAAQnB,MAAM,MAAMG,UAAU,MAAMwB,QAASR,EAA7C,iBAGA,wBAAQnB,MAAM,WAAWG,UAAU,WAAWwB,QAASR,EAAvD,gCCjFOS,G,MCIH,WACV,OACI,qBAAKzB,UAAU,YAAf,SACE,cAAC,EAAD,QCJR0B,IAASC,OACP,cAAC,IAAMP,SAAP,UACI,cAAC,EAAD,MAEJQ,SAASC,eAAe,W","file":"static/js/main.8ad022b1.chunk.js","sourcesContent":["import Cell from \"./cell\";\r\nexport default Cell;","import React from \"react\";\r\nimport \"./cell.css\";\r\n\r\nconst getColor = (value) => {\r\n  if (value > 50) {\r\n    return `rgb(21, ${88 + value}, ${56 + value})`;\r\n  }\r\n  if (value > 5) {\r\n    return `rgb(0,${29 + value}, ${24 + value})`;\r\n  }\r\n  \r\n  if (value < -5) {\r\n    return `rgb(${91 - value}, 11, 27)`;\r\n  }\r\n  \r\n  return 'rgb(21, 24, 32)';\r\n};\r\n\r\n\r\nconst Cell = ({number, isValid}) => {\r\n    return (\r\n      <>\r\n      {\r\n        isValid ? <div  className=\"cell-component\" style={{backgroundColor: getColor(number)}}>\r\n        <span className=\"number\">{number}</span>\r\n        </div> :  <div  className=\"cell-valid\"></div>\r\n      }      \r\n      </>     \r\n    )\r\n};\r\n\r\n\r\nexport default Cell;","import React, { useState, useMemo } from \"react\";\r\nimport Cell from \"../cell\";\r\nimport \"./matrix.css\";\r\n\r\nconst Matrix = () => {\r\n  const numbers = useMemo(() => {\r\n    const min = -100;\r\n    const max = 100;\r\n    let arrayNumbers = [];\r\n    for (let i = 0; i < 169; i++) {\r\n      arrayNumbers.push(Math.floor(Math.random() * (max - min)) + min);\r\n    }\r\n    return arrayNumbers;\r\n  }, []);\r\n\r\n  const [filtredName, setFiltredName] = useState(\"all\");\r\n\r\n  const checkFilters = (number) => {\r\n    \r\n    if (filtredName === \"all\") {\r\n      return true;\r\n    }\r\n\r\n    if (filtredName === \"positive\") {\r\n      if (number > 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (filtredName === \"negative\") {\r\n      if (number < 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  };\r\n  \r\n  const createMatrix = (numbers) => {\r\n    return numbers.map((number, index) => (\r\n      <div \r\n        className={`cell ${checkFilters(number) ? \"\" : \"cell-valid\"}`}\r\n        key={index}\r\n      >\r\n        <Cell isValid={checkFilters(number)} number={number}/>\r\n      </div>\r\n    ))\r\n  };\r\n\r\n  const handleCell = (e) => {\r\n    let filterName = e.target.value;\r\n\r\n    if (filterName === \"all\") {\r\n      setFiltredName(filterName);\r\n    }\r\n\r\n    if (filterName === \"positive\") {\r\n      setFiltredName(filterName);;\r\n    }\r\n\r\n    if (filterName === \"negative\") {\r\n      setFiltredName(filterName);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"header\">Draw table</div>\r\n      <div className=\"board\">\r\n        <div className=\"matrix\">\r\n          {createMatrix(numbers)}\r\n        </div>\r\n      </div>\r\n      <div className=\"footer\">\r\n        <button value=\"positive\" className=\"positive\" onClick={handleCell}>\r\n          Filter &#62; 0\r\n        </button>\r\n        <button value=\"all\" className=\"all\" onClick={handleCell}>\r\n          All\r\n        </button>\r\n        <button value=\"negative\" className=\"negative\" onClick={handleCell}>\r\n          Filter &#60; 0\r\n        </button>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Matrix;\r\n","import App from \"./App\";\r\nexport default App;","import React from 'react';\nimport { Matrix } from \"../matrix\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (  \n      <div className=\"container\">\n        <Matrix />\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(\n  <React.Fragment>\n      <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}